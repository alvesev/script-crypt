#!/bin/bash

#
#  Copyright 2021-2023 Alex Vesev
#
#  This file is part of Script Crypt.
#
#  Script Crypt is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Script Crypt is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Script Crypt. If not, see <http://www.gnu.org/licenses/>.
#
##

#
#   Fbpanel button configuration fragment:
#
#        button,item {
#            name = Bluetooth trigger
#            #icon =
#            image = /usr/share/icons/bluetooth.svg
#            tooltip = Trigger Bluetooth
#            action = trigger-bt-state
#        }
#
##


PS4="+:\${0}:\${LINENO}: "
set -eu -o pipefail
if [ "${#}" -lt 1 ] || [ "${*}" != "${*/--help/}" ] ; then
    cat "${0}" | egrep "([[:space:]]|\|)[\-]{1,2}[a-zA-Z0-9_\-]{1,})"
    exit 1
fi
if [ "${*}" != "${*/--verbose/}" ] ; then
    set -x
    OPT_VERBOSE="--verbose"
fi

###
##
#

function get_bt_soft_block_state {
    local dev_name state_soft
    if [ -n "$( /usr/sbin/rfkill --output-all --json \
                    | jq '.rfkilldevices[] | select( (.type == "bluetooth") and (.device == "tpacpi_bluetooth_sw") )' )" ]
    then
        dev_name="tpacpi_bluetooth_sw"
    else
        dev_name="hci0"
    fi
    state_soft="$( \
        /usr/sbin/rfkill --output-all --json \
            | jq -r ".rfkilldevices[] | select( (.type==\"bluetooth\") and (.device==\"${dev_name}\") ) | .soft" )"
    echo -n "${state_soft}"
}

function bt_up {
    if [ "${OPT_VERBOSE:-}" == "--verbose" ] ; then
        show_rfkill_dev_info
    fi
    /usr/sbin/rfkill unblock bluetooth
    echo "INFO:${0}:${LINENO}: Waiting for device to be unblocked..." >&2
    for idx in $( seq 0 32 ) ; do
        true : Waiting for device to be unblocked. Round ${idx}. >&2
        if [ -n "$( /usr/sbin/rfkill --output-all --json | jq '.rfkilldevices[] | select( (.type == "bluetooth") and (.device | test("hci[0-9]*") ) )' )" ] \
            && [ "$( get_bt_soft_block_state )" == "unblocked" ]
        then
            echo "INFO:${0}:${LINENO}: Device has been unblocked." >&2
            break
        fi
        sleep 0.2
    done
    if [ "${OPT_VERBOSE:-}" == "--verbose" ] ; then
        show_rfkill_dev_info
    fi
}

function bt_down {
    if [ "${OPT_VERBOSE:-}" == "--verbose" ] ; then
        show_rfkill_dev_info
    fi
    /usr/sbin/rfkill block bluetooth
    if [ "${OPT_VERBOSE:-}" == "--verbose" ] ; then
        show_rfkill_dev_info
    fi
}

function show_rfkill_dev_info {
    /usr/sbin/rfkill --output-all --json \
        | jq '.rfkilldevices[] | select( .type == "bluetooth" )'
}

###
##
#


declare -r bt_state_soft_trigger="$( get_bt_soft_block_state )"

while [ ${#} -gt 0 ] ; do
    arg_name="${1%%=*}"
    arg_value="${1#*=}"
    case "${arg_name}" in
        --show)     # Print Bluetooth state.
            if [ ! -v op_name ] ; then
                declare -r op_name="show_state"
            fi
            break
            ;;
        --switch)   # Switch Bluetooth state to a next state.
            if [ ! -v op_name ] ; then
                declare -r op_name="switch_state"
            fi
            break
            ;;
        --verbose)  # Enable debugging output in script.
            true
        ;;
        *)
            echo "ERROR:$( basename "${0}" ):${LINENO}: Got unknown argument '${arg_name}'." >&2
            exit 1
    esac
    shift
done


if [ "${op_name:-switch_state}" == "switch_state" ] ; then
    case "${bt_state_soft_trigger}" in
        blocked)
            bt_up
            ;;
        unblocked)
            bt_down
            ;;
        *)
            echo "WARNING:${0}:${LINENO}: Unknown value '${bt_state_soft_trigger}' of BT state flag." >&2
            bt_down
            ;;
    esac
elif [ "${op_name}" == "show_state" ] ; then
    echo "${bt_state_soft_trigger}"
fi


set +x
echo "INFO:${0}:${LINENO}: Job done." >&2
echo ""

#!/bin/bash

#
#  Copyright 2007-2022 Alex Vesev
#
#  This file is part of Script Crypt.
#
#  Script Crypt is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Script Crypt is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Script Crypt. If not, see <https://www.gnu.org/licenses/>.
#
##

#
#   Configuration file example:
#       [
#           {
#               "hosts": [
#                   "127.0.0.1",
#                   "localhost"
#                   ],
#               "ports": [
#                   "22",
#                   "2222"
#                   ]
#           },
#           {
#               "hosts": ["a"],
#               "ports": ["22"]
#           }
#       ]
#
##

PS4="+:\$( basename \"\${0}\" ):\${LINENO}: "
set -eu
if [ "${*}" != "${*/--verbose/}" ] ; then
    set -x
fi

declare -r f_cnf="${1:-${HOME}/.ssh/known-test-conns.json}"
declare -t timeout_conn="5"  # In seconds.

###
##
#

function produce_targets_list {
    local hst
    local prt

    while read hst prt ; do
        if nc -vz -w 1 "${hst}" "${prt}" 1>/dev/null 2>/dev/null ; then
            echo "processing_target ${hst} ${prt}"
            while read ip ; do
                echo "processing_target ${ip} ${prt}"
            done <<< "$( cat /etc/hosts \
                                | egrep -v '^[[:space:]]{0,}#' \
                                | egrep "${hst}" \
                                | awk '{print $1}' \
                                | sort \
                                | uniq )"
        else
            echo "WARNING:$( basename "${0}" ):${LINENO}: '${hst}:${prt}' is unreachable." >&2
        fi
    done <<< "$( jq \
                        -r \
                        '.[] | [.hosts[] + " " + .ports[]] | .[]' \
                        "${f_cnf}" \
                    | sort \
                    | uniq )"
}

function reload_host {
    local -r hst="${1}"
    local -r prt="${2}"
    local    exit_code=0

    #   Address specification example: [127.0.0.1]:12345
    if ssh-keygen \
        -f "${HOME}/.ssh/known_hosts" \
        -R "${hst}" \
            1>/dev/null \
            2>/dev/null
    then
        true #echo "INFO:$( basename "${0}" ):${LINENO}: '${hst}:${prt}' - removed." >&2
    else
        echo "ERROR:$( basename "${0}" ):${LINENO}: Failed to remove '${hst}:${prt}' from known hosts." >&2
        exit_code=1
    fi
    if ssh-keyscan \
                    -T "${timeout_conn}" \
                    -p "${prt}" -H "${hst}" \
                        >> "${HOME}/.ssh/known_hosts" \
                        2>/dev/null
    then
        true #echo "INFO:$( basename "${0}" ):${LINENO}: '${hst}:${prt}' - added." >&2
     else
        echo "ERROR:$( basename "${0}" ):${LINENO}: Failed to add '${hst}:${prt}'." >&2
        exit_code=1
    fi

    return ${exit_code}
}

###
##
#

if ! test -f "${f_cnf}" ; then
    echo "ERROR:$( basename "${0}" ):${LINENO}: Configuration file '${f_cnf}' is missed." >&2
    echo "Configuration file name: '${f_cnf}'.
Configuration file example:
[
   {
       \"hosts\": [
           \"127.0.0.1\",
           \"localhost\"
           ],
       \"ports\": [
           \"22\",
           \"2222\"
           ]
   },
   {
       \"hosts\": [\"abc\"],
       \"ports\": [\"22\"]
   }
]
"
    exit 1
fi

while read marker host port ; do
    reload_host "${host}" "${port}" || true
done <<< "$( produce_targets_list \
                | grep processing_target \
                | sort \
                | uniq )"

set +x
echo "INFO:$( basename "${0}" ):${LINENO}: Job done." >&2

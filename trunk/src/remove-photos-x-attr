#!/usr/bin/env python2
# -*- coding: utf-8 -*-


##
#
#  Utility for 'executable' bit removing from files located
#  in a directory and subdirectories.
#


##
#
#  Copyright 2018 Alex Vesev <alex.vesev@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.


import os
import stat
import argparse
from __builtin__ import object, property

from traceback import format_exc, print_exc
from Queue import Empty
from multiprocessing import Process, Queue, cpu_count, Lock
from pprint import pformat
from time import sleep

import logging

log_str_frmt = "%(asctime)s [%(levelname)-5.5s" \
                            + ":%(filename)s" \
                            + ":%(lineno)s"\
                            + ":pid-%(process)d" \
                            + ":%(threadName)-12.12s]" \
                            + " %(message)s"

logging.basicConfig(format=log_str_frmt, level="INFO")
logger = logging.getLogger('root')


logging.getLogger("sh").setLevel(logging.WARNING)


_shell_code_true = 0
_shell_code_false = 1


# # #
 # #
# #
 #
#


def getCLIArgs():
    mainHelpText = """
Utility for 'executable' bit removing from files located in a directory and subdirectories.
"""

    parser = argparse.ArgumentParser(description=mainHelpText)
    parser.add_argument('-d',
                        '--dir',
                        dest="top_dir",
                        required=True,
                        help="Top directory to start processing from.")
    parser.add_argument('-t',
                        '--threads-num',
                        dest="threads_num",
                        default=cpu_count()*2,
                        type=int,
                        action='store',
                        help="Top directory to start processing from.")
    parser.add_argument('-v',
                        '--verbose',
                        dest="is_verbose",
                        action="store_true",
                        help="Be verbose.")


    cliArgs = parser.parse_args()

    return cliArgs


# # #
 # #
# #
 #
#


def _worker_py2(worker, worker_input_args, result_queue):
    while True:
        result = {"input_arg":      None,
                  "result":         None,
                  "is_succeed":     False}
        try:
            arg =                   worker_input_args.get_nowait()
            result["input_arg"] =   arg
            result["result"] =      worker(arg)
            result["is_succeed"] =  True
        except Empty:
            break
        except Exception as e:
            logger.error("Had error with: {}".format(arg))
            logger.error("Single job processor failed:"
                         + "\n{}".format(format_exc(e)))
        result_queue.put(result)


def prorab_py2(worker, num_thread, worker_args):

    worker_input_args = Queue()
    result_queue = Queue()

    for arg in worker_args:
        worker_input_args.put(arg)

    jobs = [Process(target=_worker_py2,
                    args=(worker, worker_input_args, result_queue))
            for i in range(num_thread)]

    for j in jobs:
        j.start()

    while True:
        try:
            yield result_queue.get_nowait()
        except Empty:
            if worker_input_args.empty():
                break
            else:
                sleep(0.1)
        except Exception as e:
            logger.error("Jobs results collecting failed:"
                         + "\n{}".format(format_exc(e)))

    for j in jobs:
         j.join()

    worker_input_args.close()
    result_queue.close()


# # #
 # #
# #
 #
#


class ErrorState(object):
    def __init__(self, is_ok=True):
        self.lock = Lock()
        self.__is_ok = is_ok

    @property
    def is_ok(self):
        with self.lock:
            return self.__is_ok


    @is_ok.setter
    def is_ok(self, is_ok):
        with self.lock:
            error_state.__is_ok = is_ok


def findFiles(pathDir):
    def action_on_error(arg):
        logger.error("{}".format(arg))
        error_state.is_ok = False

    for root, subDirs, files in os.walk(pathDir,
                                        onerror=action_on_error,
                                        followlinks=False):
        foundItems = {}
        foundItems["topDir"] = root
        foundItems["subDir"] = subDirs
        foundItems["files"]  = files

        yield foundItems


def act_on_dir(arg):
    dir_name = arg[0]
    file_name_pool = arg[1]
    threads_number = arg[2]
    files_pool = [os.path.join(dir_name, fn) for fn in file_name_pool]
    result = [r for r in prorab_py2(act_on_file,
                                    threads_number,
                                    files_pool)]


def act_on_file(file_name):
    logger.debug("Processing file '{}'.".format(file_name))
    current = stat.S_IMODE(os.lstat(file_name).st_mode)
    os.chmod(file_name, current \
                        & ~stat.S_IEXEC \
                        & ~stat.S_IXGRP \
                        & ~stat.S_IXOTH)


def main(cli_args):
    targets = []
    if not os.path.isdir(cli_args.top_dir):
        raise(Exception("Not found or not a directory:" \
                        + "{}".format(cli_args.top_dir)))
    logger.debug("Started with '{}'.".format(cli_args.top_dir))
    for foundItems in findFiles(cli_args.top_dir):
        targets.append((foundItems["topDir"],
                        foundItems["files"],
                        cli_args.threads_num))
    job_results = [r for r in prorab_py2(act_on_dir,
                                         cli_args.threads_num,
                                         targets)]
    success_ones = [r for r in job_results if r["is_succeed"]]
    failed_ones = [r for r in job_results if not r["is_succeed"]]

    logger.debug("\n\nSUCCESS WITH:\n{}\n".format(pformat(success_ones)))
    if failed_ones:
        logger.debug("\n\nFAIL WITH:\n{}\n".format(pformat(failed_ones)))

    if not error_state.is_ok or failed_ones:
        raise(Exception("Finished, but had errors. Target was" \
                        + " '{}'.".format(cli_args.top_dir)))

###
##
#


if __name__ == '__main__':
    error_state = ErrorState()
    try:
        os.nice(5)
        cli_args = getCLIArgs()
        if cli_args.is_verbose:
            logger.setLevel(logging.DEBUG)
        main(cli_args)
    except Exception as e:
        logger.critical("Processing errors.")
        print_exc(e)
        exit(_shell_code_false)
    logger.debug("Job done.")
    exit(_shell_code_true)


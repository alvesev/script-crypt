shell_patterns=0

##
#  Some universal tools section.
#

e       Edit - Geany
        CMD=geany
        nohup $CMD %f %t 1>/dev/null 2>/dev/null &

m       Edit - MEdit
        CMD=/usr/bin/medit
        nohup "$CMD" %f %t 1>/dev/null 2>/dev/null &

v       Edit - VIM
        CMD=/usr/bin/vim
        "$CMD" %f %t

+ ! t t
b       Edit - Bless
        CMD=bless
        nohup $CMD %f 1>/dev/null 2>/dev/null &

##
#  "Open with" section, specific to file extension. Will be preselected
#  in GUI-TUI.
#

+= f ^menu$ & t r
o       MC menu config - open with Geany
        nohup geany %f %t 1>/dev/null 2>/dev/null &


# CR Web Site have templates 'content_ru-RU_*' and 'stud_ru-RU'
+= f (^[cC][oO][nN][tT][eE][nN][tT]_..-.._|^[sS][tT][uU][dD]_..-..) & t r
o       edit CR Readings site's page template in CP1251
        nohup medit --encoding CP1251 %f %t 1>/dev/null 2>/dev/null &

+= f \.[tT][xX][tT]$ & t r
o       Leafpad - open with
        nohup leafpad %f %t 1>/dev/null 2>/dev/null &

+= f ([cC][oO][nN][fF][iI][gG]|\.[cC][oO][nN][fF]|\.[cC][oO][nN][fF][iI][gG]|\.[gG][iI][tT][iI][gG][nN][oO][rR][eE])$ & t r
o       MEdit - open with
        nohup medit %f %t 1>/dev/null 2>/dev/null &

+= f (\.[hH][tT][mM][l]|\.[hH][tT][mM]|\.[xX][hH][tT][mM][l])$ & t r
o       WWW browser - open with
        if which browser-current ; then
            CMD=`which browser-current`
        else
            CMD=x-www-browser
        fi
        echo "Using '${CMD}'." >&2
        nohup "${CMD}" %f %t 1>/dev/null 2>/dev/null &

+= f (\.[hH][tT][mM][l]|\.[hH][tT][mM]|\.[xX][hH][tT][mM][l])$ & t r
o       SeaMonkey - open with
        CMD=/usr/bin/seamonkey
        nohup $CMD %f %t 1>/dev/null 2>/dev/null &

+= f (\.[jJ][sS][oO][nN]|\.[yY][aA][mM][lL]|\.[lL][iI][bB][sS][oO][nN][nN][eE][tT]|\.[jJ][sS][oO][nN][nN][eE][tT])$ & t r
o       Chromium - open with
        CMD=/usr/bin/chromium-browser
        nohup $CMD %f %t 1>/dev/null 2>/dev/null &

+= f (\.[pP][cC][xX]|\.[gG][iI][fF]|\.[pP][nN][gG]|\.[jJ][pP][gG]|\.[jJ][pP][eE][gG]|\.[tT][iI][fF]|\.[tT][iI][fF][fF]|\.[bB][mM][pP])$ & t r
o       gThumb - open with
        nohup gthumb %f %t 1>/dev/null 2>/dev/null &

+= f \.[dD][iI][aA]$ & t r
o       Dia - open with
        nohup dia %f %t 1>/dev/null 2>/dev/null &

+= f (\.[xX][cC][fF]|\.[pP][cC][xX]|\.[gG][iI][fF]|\.[pP][nN][gG]|\.[jJ][pP][gG]|\.[jJ][pP][eE][gG]|\.[tT][iI][fF]|\.[tT][iI][fF][fF]|\.[bB][mM][pP])$ & t r
o       Gimp - open with
        nohup gimp %f %t 1>/dev/null 2>/dev/null &

+= f \.[sS][vV][gG]$ & t r
o       Inkscape - open with
        nohup inkscape %f %t 1>/dev/null 2>/dev/null &

+= f \.[dD][rR][aA][wW][iI][oO]$ & t r
o       Drawio - open with
        nohup drawio %f %t 1>/dev/null 2>/dev/null &

+= f (\.[sS][lL][aA]|\.[sS][lL][aA]\.[gG][zZ])$ & t r
o       Scribus - open with
        nohup scribus %f %t 1>/dev/null 2>/dev/null &

+= f \.[pP][dD][fF]$ & t r
o       Evince - open with
        nohup evince %f %t 1>/dev/null 2>/dev/null &

+= f \.[pP][dD][fF]$ & t r
o       Master PDF Editor - open with
        nohup masterpdfeditor5 %f %t 1>/dev/null 2>/dev/null &

+= f [rR][tT][fF]$ & t r
o       Rich or similar text format - open with Libre Office
        nohup libreoffice %f %t 1>/dev/null 2>/dev/null &
+= f (\.[oO][dD][fF]|\.[oO][dD][tT]|\.[oO][dD][sS])$ & t r
o       Libre Office document - open with
        nohup libreoffice %f %t 1>/dev/null 2>/dev/null &
+= f (\.[dD][oO][cC]|\.[dD][oO][cC][xX]|\.[xX][lL][sS]|\.[xX][lL][sS][xX]|\.[pP][pP][tT]|\.[pP][pP][tT][xX])$ & t r
o       Little and sleek Office document - open with
        nohup libreoffice %f %t 1>/dev/null 2>/dev/null &

+= f \.[gG][eE][aA][nN][yY]$ & t r
o       Geany - open with
        nohup geany %f %t 1>/dev/null 2>/dev/null &

# Audacity: flac, ...
+= f \.([fF][lL][aA][cC]|[wW][aA][vV]|[oO][gG][gG]|[mM][pP][23]|[wW][aA][vV])$ & t r
o       Audacity - open with, the first only
        nohup audacity %f 1>/dev/null 2>/dev/null &

# Audacious player and sound files names
+ ! t t & f \.([fF][lL][aA][cC]|[wW][aA][vV]|[oO][gG][gG]|[mM][pP][23]|[wW][aA][vV])$
o       Audacious - enqueue to
        nohup audacious --enqueue-to-temp %f 1>/dev/null 2>/dev/null &
+ t t & f \.([fF][lL][aA][cC]|[wW][aA][vV]|[oO][gG][gG]|[mM][pP][23]|[wW][aA][vV])$
o       Audacious - enqueue to
        nohup audacious --enqueue-to-temp %t 1>/dev/null 2>/dev/null &

# VLC player and video-audio files names
+ ! t t & f \.([mM][pP][234]|[wW][eE][bB][mM]|[fF][lL][aA][cC]|[wW][aA][vV]|[oO][gG][gG]|[mM][pP][23]|[wW][aA][vV])$
o       VLC - enqueue to
        nohup vlc  %f 1>/dev/null 2>/dev/null &
+ t t & f \.([mM][pP][234]|[wW][eE][bB][mM]|[fF][lL][aA][cC]|[wW][aA][vV]|[oO][gG][gG]|[mM][pP][23]|[wW][aA][vV])$
o       VLC - enqueue to
        nohup vlc %t 1>/dev/null 2>/dev/null &

# torrent
+= f \.([tT][oO][rR][rR][eE][nN][tT])$ & t r
o       Transmission - open with
        nohup transmission-gtk %f %t 1>/dev/null 2>/dev/null &

# djvu
+= f \.([dD][jJ][vV][uU]|[dD][jJ][vV])$ & t r
o       Evince - open with
        nohup evince %f %t 1>/dev/null 2>/dev/null &

# FreeMind
+= f \.([mM][mM])$ & t r
o       FreeMind - open with
        nohup freemind %f %t 1>/dev/null 2>/dev/null &

# Compressed file
+= f \.([xX][zZ]|[tT][aA][rR]|[tT][aA][rR]\.7[zZ])$ & t r
o       File-roller - open with
        nohup file-roller %f %t 1>/dev/null 2>/dev/null &
+= f \.[zZ][iI][pP]$ & t r
o       Test Zip file integrity
        err_state=0
        for fName in $( for path in %f %t ; do
                            echo "${path}"
                        done | sort | uniq )
        do
            if ! zip --test "%d/${fName}" ; then
                echo "ERROR: Test failed for '${fName}'."
                err_state=1
            fi
        done
        for fName in %T ; do
            if ! zip --test "%D/${fName}" ; then
                err_state=1
                echo "ERROR: Test failed for '${fName}'."
            fi
        done
        set +x
        if test "${err_state}" -eq "0" ; then
            echo "SUCCESS: Test(s) is(are) Ok. Press 'Enter' to continue..."
        else
            echo "ERROR: Test(s) failed. Press 'Enter' to continue..."
        fi
        read -p ' ' x

# Markdown
+= f \.([mM][dD])$ & t r
o       Retext - open with
        nohup retext %f %t 1>/dev/null 2>/dev/null &
+= f \.([mM][dD])$ & t r
o       Atom - open with
        nohup atom %f %t 1>/dev/null 2>/dev/null &

------------------------------------------------------------
+ t t
c       compare files - Meld
        dirCurrentPanel="%d"
        dirNeighbourPanel="%D"
        cliArguments=""
        for fName in %t ; do
            cliArguments="${cliArguments} '${dirCurrentPanel}/${fName}'"
            echo "MC have evaluated from current panel: $cliArguments"
        done
        for fName in %T ; do
            cliArguments="${cliArguments} '${dirNeighbourPanel}/${fName}'"
            echo "MC have evaluated from opposite panel: $cliArguments"
        done
        echo " "
        echo "MC have resulting files list: $cliArguments"
        echo " "
        bash -c "nohup meld $cliArguments 2>/dev/null 1>/dev/null &"

+ t t
c       compare files - ICDiff
        dirCurrentPanel="%d"
        dirNeighbourPanel="%D"
        cliArguments=""
        for fName in %t ; do
            cliArguments="${cliArguments} '${dirCurrentPanel}/${fName}'"
            echo "MC have evaluated from current panel: $cliArguments"
        done
        for fName in %T ; do
            cliArguments="${cliArguments} '${dirNeighbourPanel}/${fName}'"
            echo "MC have evaluated from opposite panel: $cliArguments"
        done
        echo " "
        echo "MC have resulting files list: $cliArguments"
        echo " "
        bash -c "icdiff $cliArguments"

+ ! t t
c       no files selected for: compare files - Meld
        /bin/true

+ t t
c       calculate MD5 checksum
        CMD="/usr/bin/md5sum"
        dirCurrentPanel="%d"
        dirNeighbourPanel="%D"
        for fName in %t ; do
            "${CMD}" "${dirCurrentPanel}/${fName}"
        done
        for fName in %T ; do
            "${CMD}" "${dirNeighbourPanel}/${fName}"
        done
+ ! t t
c       no files selected for: calculate MD5 checksum
        /bin/true

+ t t
d       compare directories
        dirCurrentPanel="%d"
        dirNeighbourPanel="%D"
        cliArguments=""
        for fName in %t ; do
            cliArguments="${cliArguments} '${dirCurrentPanel}/${fName}'"
            echo "MC have evaluated from current panel: $cliArguments"
        done
        for fName in %T ; do
            cliArguments="${cliArguments} '${dirNeighbourPanel}/${fName}'"
            echo "MC have evaluated from opposite panel: $cliArguments"
        done
        echo " "
        echo "MC have resulting files list: $cliArguments"
        echo " "
        bash -c "nohup /usr/share/smartsynchronize/bin/smartsynchronize.sh $cliArguments 2>/dev/null 1>/dev/null &"
+ ! t t
d       no files selected for: compare directories
        /bin/true

+ t t
c       print checksum and block counts
        (
            CMD="/usr/bin/sum"
            dirCurrentPanel="%d"
            dirNeighbourPanel="%D"
            for fName in %t ; do
                echo "${fName}"
                "${CMD}" "${dirCurrentPanel}/${fName}"
                shift 1
            done
            for fName in %T ; do
                echo "${fName}"
                "${CMD}" "${dirNeighbourPanel}/${fName}"
                shift 1
            done
        )
+ ! t t
c       no files selected for: print checksum and block counts
        /bin/true

+ ! t t
z       Size of
        CMD="du -hs"
        $CMD %f

+ t t
z       Size of
        set %t; CMD="du -hs"
        while [ -n "$1" ]; do
            $CMD "$1"
            shift
        done

+ t t
r       multi rename - KRename
        CMD="/usr/bin/krename"
        nohup "${CMD}" %t 1>/dev/null 2>/dev/null &
+ ! t t
r       no files selected for: multi rename - KRename
        /bin/true

------------------------------------------------------------

# Printout names - Intended to be default, if no other match above.

=+ ! t t
p   Print current name and - into clipboard
        echo "%d/%f"
        echo -n "%d/%f" | xclip
        echo -n "%d/%f" | xclip -selection c

=+ t t
p   Print selected names and - into clipboard
        set %t
        as_text_all=$(for name in "${@}" ; do echo "%d/${name}" ; done)
        echo -n "${as_text_all}" | xclip
        echo -n "${as_text_all}" | xclip -selection c
        echo "${as_text_all}"

=+ t t
P   Print selected names as single line and - into clipboard
        set %t
        as_text_all=$(for name in "${@}" ; do echo -n "'%d/${name}' " ; done)
        echo -n "${as_text_all}" | xclip
        echo -n "${as_text_all}" | xclip -selection c
        echo "${as_text_all}"

------------------------------------------------------------

##
#  Compression and packaging tools
#

2       Pack the current subdirectory (tar)
        f_out=`basename %d /`-`get-timestamp  --with-seconds`
        Pwd=`basename %d /`
        echo -n "Name of the compressed file (without extension) [$f_out]: "
        read tar
        if [ "$tar"x = x ]; then tar="$f_out"; fi
        cd .. && \
        tar cf - "$Pwd" > "$tar.tar" && \
        echo "../$tar.tar created."

3       Compress the current subdirectory (tar.gz)
        f_out=`basename %d /`-`get-timestamp  --with-seconds`
        Pwd=`basename %d /`
        echo -n "Name of the compressed file (without extension) [$f_out]: "
        read tar
        if [ "$tar"x = x ]; then tar="$f_out"; fi
        cd .. && \
        tar cf - "$Pwd" | gzip -f9 > "$tar.tar.gz" && \
        echo "../$tar.tar.gz created."

4       Compress the current subdirectory (tar.bz2)
        f_out=`basename %d /`-`get-timestamp  --with-seconds`
        Pwd=`basename %d /`
        echo -n "Name of the compressed file (without extension) [$f_out]: "
        read tar
        if [ "$tar"x = x ]; then tar="$f_out"; fi
        cd .. && \
        tar cf - "$Pwd" | bzip2 -f > "$tar.tar.bz2" && \
        echo "../$tar.tar.bz2 created."

5       Compress the current subdirectory (tar.7z)
        f_out=`basename %d /`-`get-timestamp  --with-seconds`
        Pwd=`basename %d /`
        echo -n "Name of the compressed file (without extension) [$f_out]: "
        read tar
        if [ "$tar"x = x ]; then tar="$f_out"; fi
        cd .. && \
        tar cf - "$Pwd" | 7za a -si "$tar.tar.7z" && \
        echo "../$tar.tar.7z created."

6       Compress the current subdirectory (Zip)
        f_out=`basename %d /`-`get-timestamp  --with-seconds`
        Pwd=`basename %d /`
        echo -n "Name of the compressed file (without extension) [$f_out]: "
        read arch_name
        if [ "$arch_name"x = x ]; then arch_name="$f_out"; fi
        cd .. && \
        zip -9 --recurse-paths "$arch_name.zip" "$Pwd" && \
        echo "../$arch_name.zip created."

=+ f \.tar\.gz$ | f \.tar\.z$ | f \.tgz$ | f \.tpz$ | f \.tar\.lz$ | f \.tar\.lzma$ | f \.tar\.7z$ | f \.tar\.xz$ | f \.tar\.Z$ | f \.tar\.bz2$ & t r
x       Extract the contents of a compressed tar file
        unset PRG
        case %f in
            *.tar.bz2)
                PRG="bunzip2 -c"
                ;;
            *.tar.gz|*.tar.z|*.tgz|*.tpz|*.tar.Z)
                PRG="gzip -dc"
                ;;
            *.tar.lzma)
                PRG="lzma -dc"
                ;;
            *.tar.lz)
                PRG="lzip -dc"
                ;;
            *.tar.xz)
                PRG="xz -dc"
                ;;
            *.tar.7z)
                PRG="7za e -so"
                ;;
            *)
                exit 1
                ;;
        esac
        $PRG %f | tar xvf -

+ ! t t
t       Tar'ify single file
        fName=`basename %f`-`get-timestamp  --with-seconds`
        if test -e "${fName}.tar" ; then
            echo -ne "\n\n"
            read -p "Error: file '${fName}.tar' already exist. Press 'Enter' key to continue." voidVar
            exit 1
        fi
        tar --keep-old-files --file "${fName}.tar" --create `basename %f` \
            && echo "'${fName}.tar' created." # --keep-old-files - Don't replace existing files when extracting.

+ t t
t       Tar'ify all selected files (one TAR per file)
        ts=`get-timestamp  --with-seconds`
        for fName in %t ; do
            fName=`basename "${fName}"`
            fTar="$fName-$ts.tar"
            if test -e "$fName.tar" ; then
                echo -ne "\n\n"
                read -p "Error: file '${fTar}' already exist. Press 'Enter' key to continue." voidVar
                exit 1
            fi
            cd %d \
                && tar --keep-old-files --file "${fTar}" --create "${fName}" \
                && echo "'${fTar}' created." # --keep-old-files - Don't replace existing files when extracting.
        done

+ ! t t
Y       Gzip or gunzip single file
        fName=%f
        case "${fName}" in
            *.gz) DECOMP="--decompress";;
            *.[zZ]) DECOMP="--decompress";;
        esac
        # --keep - Keep (don't delete) input files during compression or decompression.
        gzip $DECOMP --verbose --keep "${fName}"

+ t t
Y       Gzip or gunzip selected files
        for fName in %t
        do
          unset DECOMP
          case "${fName}" in
            *.gz) DECOMP="--decompress";;
            *.[zZ]) DECOMP="--decompress";;
          esac
          # --keep - Keep (don't delete) input files during compression or decompression.
          gzip $DECOMP --verbose --keep "${fName}"
        done

+ ! t t
b       Bzip2 or bunzip2 single file
        unset DECOMP
        case %f in
            *.bz2) DECOMP=-d;;
        esac
        bzip2 $DECOMP -v --keep %f

+ t t
B       Bzip2 or bunzip2 selected files
        for i in %t
        do
          unset DECOMP
          case "$i" in
            *.bz2) DECOMP=-d;;
          esac
          bzip2 $DECOMP -v --keep "$i"
        done

+ ! t t
i       Zip or UnZip single file
        case %f in
            *.zip)
                unzip -d . %f
                ;;
            *)
                zip -9 --recurse-paths %f-`get-timestamp`.zip %f
                ;;
        esac

+ t t
I       Zip or UnZip selected files (one arch. per file)
        ts=`get-timestamp`
        for i in %t
        do
            case "${i}" in
                *.zip)
                    unzip -d . "${i}"
                    ;;
                *)
                    zip -9 --recurse-paths "${i}-${ts}.zip" "${i}"
                    ;;
            esac
        done

+ f \.tar.gz$ | f \.tgz$ | f \.tpz$ | f \.tar.Z$ | f \.tar.z$ | f \.tar.bz2$ | f \.tar.F$ & t r & ! t t
z       Extract compressed tar file to subdirectory
        unset D
        set gzip -cd
        case %f in
          *.tar.gz) D="`basename %f .tar.gz`";;
          *.tgz)    D="`basename %f .tgz`";;
          *.tpz)    D="`basename %f .tpz`";;
          *.tar.Z)  D="`basename %f .tar.Z`";;
          *.tar.z)  D="`basename %f .tar.z`";;
          *.tar.bz2) D="`basename %f .tar.bz2`"; set bunzip2 -c ;;
          *.tar.F) D="`basename %f .tar.F`"; set freeze -dc;
        esac
        mkdir "$D"; cd "$D" && ("$1" "$2" ../%f | tar xvf -)

+ t t
Z       Extract compressed tar files to subdirectories
        for i in %t
        do
          set gzip -dc
          unset D
          case "$i" in
            *.tar.gz)  D="`basename $i .tar.gz`";;
            *.tgz)     D="`basename $i .tgz`";;
            *.tpz)     D="`basename $i .tpz`";;
            *.tar.Z)   D="`basename $i .tar.Z`";;
            *.tar.z)   D="`basename $i .tar.z`";;
            *.tar.F)   D="`basename $i .tar.F`"; set freeze -dc;;
            *.tar.bz2) D="`basename $i .tar.bz2`"; set bunzip2 -c;;
          esac
          mkdir "$D"; (cd "$D" && "$1" "$2" "../$i" | tar xvf -)
        done

+ f \.gz$ | f \.tgz$ | f \.tpz$ | f \.Z$ | f \.z$ | f \.bz2$ & t r & ! t t
c       Convert gz<->bz2, tar.gz<->tar.bz2 & tgz->tar.bz2
        unset D
        unset EXT
        case %f in
            *.tgz)      EXT=tgz;;
            *.tpz)      EXT=tpz;;
            *.Z)        EXT=Z;;
            *.z)        EXT=z;;
            *.gz)       EXT=gz;;
            *.bz2)      EXT=bz2;;
        esac
        case $EXT in
          tgz|tpz)      D="`basename %f .$EXT`.tar";;
          gz|Z|z)       D="`basename %f .$EXT`";;
          bz2)          D="`basename %f .bz2`";;
        esac
        if [ "$EXT" = "bz2" ]; then
            bunzip2 -v %f ; gzip -f9 -v "$D"
        else
            gunzip -v %f ; bzip2 -v "$D"
        fi

+ t t
C       Convert gz<->bz2, tar.gz<->tar.bz2 & tgz->tar.bz2
        set %t
        while [ -n "$1" ]
        do
          unset D
          unset EXT
          case "$1" in
            *.tgz)      EXT=tgz;;
            *.tpz)      EXT=tpz;;
            *.Z)        EXT=Z;;
            *.z)        EXT=z;;
            *.gz)       EXT=gz;;
            *.bz2)      EXT=bz2;;
          esac
          case $EXT in
              tgz)    D="`basename $1 .tgz`.tar";;
              tpz)    D="`basename $1 .tpz`.tar";;
              gz|Z|z) D="`basename $1 .$EXT`";;
              bz2)    D="`basename $1 .bz2`";;
          esac
          if [ "$EXT" = "bz2" ]; then
            bunzip2 -v "$1"
            gzip -f9 -v "$D"
          else
            gunzip -v "$1"
            bzip2 -v "$D"
          fi
          shift
        done

##
#  Other tools.
#

+ x /usr/bin/open | x /usr/local/bin/open & x /bin/sh
o       Open next a free console
        open -s -- sh
#------------------------------------------------------------
#+ t r & ! t t
#d       Delete file if a copy exists in the other directory.
        #if [ "%d" = "%D" ]; then
          #echo "The two directories must be different."
          #exit 1
        #fi
        #if [ -f %D/%f ]; then        # if two of them, then
          #if cmp -s %D/%f %f; then
            #rm %f && echo "%f: DELETED."
          #else
            #echo "%f and %D/%f differ: NOT deleted."
            #echo -n "Press RETURN "
            #read key
          #fi
        #else
          #echo "%f: No copy in %D/%f: NOT deleted."
        #fi

#+ t t
#D       Delete tagged files if a copy exists in the other directory.
        #if [ "%d" = "%D" ]; then
          #echo "The two directores must be different."
          #exit 1
        #fi
        #for i in %t
        #do
          #if [ -f "%D/$i" ]; then
            #SUM1="`sum $i`"
            #SUM2="`sum %D/$i`"
            #if [ "$SUM1" = "$SUM2" ]; then
              #rm "$i" && echo "${i}: DELETED."
            #else
              #echo "$i and %D/$i differ: NOT deleted."
            #fi
          #else
            #echo "%i has no copy in %D: NOT deleted."
          #fi
        #done

------------------------------------------------------------

u   Unmount directory under cursor
        dirCurrentPanel="%d"
        objectSelected="%f"
        umount "${dirCurrentPanel}/${objectSelected}"
